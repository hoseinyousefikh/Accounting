// <auto-generated />
using System;
using App.Infra.Data.Db.SqlServer.Ef.Accounting.DBContaxt;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace App.Infra.Data.Db.SqlServer.Ef.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250320210521_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("App.Domain.Core.Accounting.Entities.AccountIn.FromAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AssetsId")
                        .HasColumnType("int");

                    b.Property<int?>("BankId")
                        .HasColumnType("int");

                    b.Property<int?>("CapitalId")
                        .HasColumnType("int");

                    b.Property<int?>("CategoryCostId")
                        .HasColumnType("int");

                    b.Property<int?>("CategoryIncomeId")
                        .HasColumnType("int");

                    b.Property<int?>("CriticismId")
                        .HasColumnType("int");

                    b.Property<int?>("CriticismsId")
                        .HasColumnType("int");

                    b.Property<int?>("DebtsId")
                        .HasColumnType("int");

                    b.Property<int?>("FundsId")
                        .HasColumnType("int");

                    b.Property<int?>("PersonsId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AssetsId");

                    b.HasIndex("BankId");

                    b.HasIndex("CapitalId");

                    b.HasIndex("CategoryCostId");

                    b.HasIndex("CategoryIncomeId");

                    b.HasIndex("CriticismsId");

                    b.HasIndex("DebtsId");

                    b.HasIndex("FundsId");

                    b.HasIndex("PersonsId");

                    b.ToTable("FromAccounts", (string)null);
                });

            modelBuilder.Entity("App.Domain.Core.Accounting.Entities.Accounts.Assets", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Assets", (string)null);
                });

            modelBuilder.Entity("App.Domain.Core.Accounting.Entities.Accounts.Bank", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountNumber")
                        .HasColumnType("int");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<long>("CardNumber")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Oranches")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<long>("ShabaNumber")
                        .HasColumnType("bigint");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Banks", (string)null);
                });

            modelBuilder.Entity("App.Domain.Core.Accounting.Entities.Accounts.Capital", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Capitals", (string)null);
                });

            modelBuilder.Entity("App.Domain.Core.Accounting.Entities.Accounts.CategoryCost", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsPublic")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("CategoryCosts", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsDeleted = false,
                            IsPublic = true,
                            Name = "اغذیه",
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            IsDeleted = false,
                            IsPublic = true,
                            Name = "مسکن",
                            UserId = 1
                        },
                        new
                        {
                            Id = 3,
                            IsDeleted = false,
                            IsPublic = true,
                            Name = "البسه و پوشاک",
                            UserId = 1
                        },
                        new
                        {
                            Id = 4,
                            IsDeleted = false,
                            IsPublic = true,
                            Name = "خودرو",
                            UserId = 1
                        },
                        new
                        {
                            Id = 5,
                            IsDeleted = false,
                            IsPublic = true,
                            Name = "ایاب و ذهاب مسافرت",
                            UserId = 1
                        },
                        new
                        {
                            Id = 6,
                            IsDeleted = false,
                            IsPublic = true,
                            Name = "اموزش و تحصیلات",
                            UserId = 1
                        },
                        new
                        {
                            Id = 7,
                            IsDeleted = false,
                            IsPublic = true,
                            Name = "فرهنگی و سرگرمی",
                            UserId = 1
                        },
                        new
                        {
                            Id = 8,
                            IsDeleted = false,
                            IsPublic = true,
                            Name = "هدایا",
                            UserId = 1
                        },
                        new
                        {
                            Id = 9,
                            IsDeleted = false,
                            IsPublic = true,
                            Name = "بهداشتی درمانی",
                            UserId = 1
                        },
                        new
                        {
                            Id = 10,
                            IsDeleted = false,
                            IsPublic = true,
                            Name = "هزینه های اداری",
                            UserId = 1
                        },
                        new
                        {
                            Id = 11,
                            IsDeleted = false,
                            IsPublic = true,
                            Name = "دیون اسلامی",
                            UserId = 1
                        },
                        new
                        {
                            Id = 12,
                            IsDeleted = false,
                            IsPublic = true,
                            Name = "سرمایه گزاری",
                            UserId = 1
                        });
                });

            modelBuilder.Entity("App.Domain.Core.Accounting.Entities.Accounts.CategoryIncome", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsPublic")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("CategoryIncomes", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsDeleted = false,
                            IsPublic = true,
                            Name = "حقوق",
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            IsDeleted = false,
                            IsPublic = true,
                            Name = "فروش",
                            UserId = 1
                        },
                        new
                        {
                            Id = 3,
                            IsDeleted = false,
                            IsPublic = true,
                            Name = "سود سرمایه",
                            UserId = 1
                        },
                        new
                        {
                            Id = 4,
                            IsDeleted = false,
                            IsPublic = true,
                            Name = "یارانه و هدایا",
                            UserId = 1
                        },
                        new
                        {
                            Id = 5,
                            IsDeleted = false,
                            IsPublic = true,
                            Name = "درآمد اجاره",
                            UserId = 1
                        });
                });

            modelBuilder.Entity("App.Domain.Core.Accounting.Entities.Accounts.Debts", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Debts", (string)null);
                });

            modelBuilder.Entity("App.Domain.Core.Accounting.Entities.Accounts.Funds", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("FundOperations")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Funds", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FundOperations = 0,
                            IsDeleted = false,
                            IsPublic = true,
                            Name = "کیف پول",
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            FundOperations = 0,
                            IsDeleted = false,
                            IsPublic = true,
                            Name = "گاو صندوق",
                            UserId = 1
                        },
                        new
                        {
                            Id = 3,
                            FundOperations = 0,
                            IsDeleted = false,
                            IsPublic = true,
                            Name = " منزل",
                            UserId = 1
                        });
                });

            modelBuilder.Entity("App.Domain.Core.Accounting.Entities.Accounts.Persons", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int?>("ContactsId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsPublic")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("PersonConditions")
                        .HasColumnType("int");

                    b.Property<int?>("PhonNumber")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ContactsId");

                    b.HasIndex("UserId");

                    b.ToTable("Persons");
                });

            modelBuilder.Entity("App.Domain.Core.Accounting.Entities.Accounts.Sub.AddAssets", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("AssetsId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("personConditions")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AssetsId");

                    b.HasIndex("UserId");

                    b.ToTable("AddAssets", (string)null);
                });

            modelBuilder.Entity("App.Domain.Core.Accounting.Entities.Accounts.Sub.AddCapital", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("CapitalId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("personConditions")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CapitalId");

                    b.HasIndex("UserId");

                    b.ToTable("AddCapitals", (string)null);
                });

            modelBuilder.Entity("App.Domain.Core.Accounting.Entities.Accounts.Sub.AddDbts", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("DebtsId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("personConditions")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DebtsId");

                    b.HasIndex("UserId");

                    b.ToTable("AddDbts", (string)null);
                });

            modelBuilder.Entity("App.Domain.Core.Accounting.Entities.Accounts.Sub.Creditors", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("Descriptions")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Creditors", (string)null);
                });

            modelBuilder.Entity("App.Domain.Core.Accounting.Entities.Accounts.Sub.Debtors", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("Descriptions")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Debtors", (string)null);
                });

            modelBuilder.Entity("App.Domain.Core.Accounting.Entities.Accounts.Sub.SubcategoryCost", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryCostId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsPublic")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryCostId");

                    b.HasIndex("UserId");

                    b.ToTable("SubcategoryCosts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryCostId = 1,
                            IsDeleted = false,
                            IsPublic = true,
                            Name = "تنقلات",
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            CategoryCostId = 1,
                            IsDeleted = false,
                            IsPublic = true,
                            Name = "گوشت قرمز",
                            UserId = 1
                        },
                        new
                        {
                            Id = 3,
                            CategoryCostId = 1,
                            IsDeleted = false,
                            IsPublic = true,
                            Name = "مرغ",
                            UserId = 1
                        },
                        new
                        {
                            Id = 4,
                            CategoryCostId = 1,
                            IsDeleted = false,
                            IsPublic = true,
                            Name = "ماهی و میگو",
                            UserId = 1
                        },
                        new
                        {
                            Id = 5,
                            CategoryCostId = 1,
                            IsDeleted = false,
                            IsPublic = true,
                            Name = "برنج",
                            UserId = 1
                        },
                        new
                        {
                            Id = 6,
                            CategoryCostId = 1,
                            IsDeleted = false,
                            IsPublic = true,
                            Name = "نان",
                            UserId = 1
                        },
                        new
                        {
                            Id = 7,
                            CategoryCostId = 1,
                            IsDeleted = false,
                            IsPublic = true,
                            Name = "لبنیات",
                            UserId = 1
                        },
                        new
                        {
                            Id = 8,
                            CategoryCostId = 1,
                            IsDeleted = false,
                            IsPublic = true,
                            Name = "نوشیدنی",
                            UserId = 1
                        },
                        new
                        {
                            Id = 9,
                            CategoryCostId = 1,
                            IsDeleted = false,
                            IsPublic = true,
                            Name = "حبوبات",
                            UserId = 1
                        },
                        new
                        {
                            Id = 10,
                            CategoryCostId = 1,
                            IsDeleted = false,
                            IsPublic = true,
                            Name = "غلات",
                            UserId = 1
                        },
                        new
                        {
                            Id = 11,
                            CategoryCostId = 1,
                            IsDeleted = false,
                            IsPublic = true,
                            Name = "میوه و تره بار",
                            UserId = 1
                        },
                        new
                        {
                            Id = 12,
                            CategoryCostId = 1,
                            IsDeleted = false,
                            IsPublic = true,
                            Name = "غذای بیرون",
                            UserId = 1
                        },
                        new
                        {
                            Id = 13,
                            CategoryCostId = 1,
                            IsDeleted = false,
                            IsPublic = true,
                            Name = "رستوران",
                            UserId = 1
                        },
                        new
                        {
                            Id = 14,
                            CategoryCostId = 1,
                            IsDeleted = false,
                            IsPublic = true,
                            Name = "کافی شاپ",
                            UserId = 1
                        },
                        new
                        {
                            Id = 15,
                            CategoryCostId = 1,
                            IsDeleted = false,
                            IsPublic = true,
                            Name = "سایر",
                            UserId = 1
                        },
                        new
                        {
                            Id = 16,
                            CategoryCostId = 2,
                            IsDeleted = false,
                            IsPublic = true,
                            Name = "قبض اب",
                            UserId = 1
                        },
                        new
                        {
                            Id = 17,
                            CategoryCostId = 2,
                            IsDeleted = false,
                            IsPublic = true,
                            Name = "قبض برق",
                            UserId = 1
                        },
                        new
                        {
                            Id = 18,
                            CategoryCostId = 2,
                            IsDeleted = false,
                            IsPublic = true,
                            Name = "قبض گاز",
                            UserId = 1
                        },
                        new
                        {
                            Id = 19,
                            CategoryCostId = 2,
                            IsDeleted = false,
                            IsPublic = true,
                            Name = "قبض تلفن",
                            UserId = 1
                        },
                        new
                        {
                            Id = 20,
                            CategoryCostId = 2,
                            IsDeleted = false,
                            IsPublic = true,
                            Name = "شارژ ساختمان",
                            UserId = 1
                        },
                        new
                        {
                            Id = 21,
                            CategoryCostId = 2,
                            IsDeleted = false,
                            IsPublic = true,
                            Name = "اجاره منزل",
                            UserId = 1
                        },
                        new
                        {
                            Id = 22,
                            CategoryCostId = 2,
                            IsDeleted = false,
                            IsPublic = true,
                            Name = "لوازم منزل",
                            UserId = 1
                        },
                        new
                        {
                            Id = 23,
                            CategoryCostId = 2,
                            IsDeleted = false,
                            IsPublic = true,
                            Name = "قبض شارژ موبایل",
                            UserId = 1
                        },
                        new
                        {
                            Id = 24,
                            CategoryCostId = 2,
                            IsDeleted = false,
                            IsPublic = true,
                            Name = "بیمه ساختمان",
                            UserId = 1
                        },
                        new
                        {
                            Id = 25,
                            CategoryCostId = 2,
                            IsDeleted = false,
                            IsPublic = true,
                            Name = "تعمیرات ساختمان",
                            UserId = 1
                        },
                        new
                        {
                            Id = 26,
                            CategoryCostId = 2,
                            IsDeleted = false,
                            IsPublic = true,
                            Name = "عوارض شهرداری",
                            UserId = 1
                        },
                        new
                        {
                            Id = 27,
                            CategoryCostId = 2,
                            IsDeleted = false,
                            IsPublic = true,
                            Name = "مالیات",
                            UserId = 1
                        },
                        new
                        {
                            Id = 28,
                            CategoryCostId = 2,
                            IsDeleted = false,
                            IsPublic = true,
                            Name = "سایر",
                            UserId = 1
                        },
                        new
                        {
                            Id = 29,
                            CategoryCostId = 3,
                            IsDeleted = false,
                            IsPublic = true,
                            Name = "خیاطی",
                            UserId = 1
                        },
                        new
                        {
                            Id = 30,
                            CategoryCostId = 3,
                            IsDeleted = false,
                            IsPublic = true,
                            Name = "خرید پوشاک",
                            UserId = 1
                        },
                        new
                        {
                            Id = 31,
                            CategoryCostId = 3,
                            IsDeleted = false,
                            IsPublic = true,
                            Name = "خشکشویی",
                            UserId = 1
                        },
                        new
                        {
                            Id = 32,
                            CategoryCostId = 3,
                            IsDeleted = false,
                            IsPublic = true,
                            Name = "سایر",
                            UserId = 1
                        },
                        new
                        {
                            Id = 33,
                            CategoryCostId = 4,
                            IsDeleted = false,
                            IsPublic = true,
                            Name = "بنزین",
                            UserId = 1
                        },
                        new
                        {
                            Id = 34,
                            CategoryCostId = 4,
                            IsDeleted = false,
                            IsPublic = true,
                            Name = "تعویض روغن",
                            UserId = 1
                        },
                        new
                        {
                            Id = 35,
                            CategoryCostId = 4,
                            IsDeleted = false,
                            IsPublic = true,
                            Name = "جرایم رانندگی",
                            UserId = 1
                        },
                        new
                        {
                            Id = 36,
                            CategoryCostId = 4,
                            IsDeleted = false,
                            IsPublic = true,
                            Name = "طرح ترافیک",
                            UserId = 1
                        },
                        new
                        {
                            Id = 37,
                            CategoryCostId = 4,
                            IsDeleted = false,
                            IsPublic = true,
                            Name = "پارکینگ",
                            UserId = 1
                        },
                        new
                        {
                            Id = 38,
                            CategoryCostId = 4,
                            IsDeleted = false,
                            IsPublic = true,
                            Name = "بیمه ثالث",
                            UserId = 1
                        },
                        new
                        {
                            Id = 39,
                            CategoryCostId = 4,
                            IsDeleted = false,
                            IsPublic = true,
                            Name = "بیمه بدنه",
                            UserId = 1
                        },
                        new
                        {
                            Id = 40,
                            CategoryCostId = 4,
                            IsDeleted = false,
                            IsPublic = true,
                            Name = "تغییرات اساسی",
                            UserId = 1
                        },
                        new
                        {
                            Id = 41,
                            CategoryCostId = 4,
                            IsDeleted = false,
                            IsPublic = true,
                            Name = "عوارض خودرو",
                            UserId = 1
                        },
                        new
                        {
                            Id = 42,
                            CategoryCostId = 4,
                            IsDeleted = false,
                            IsPublic = true,
                            Name = "سایر",
                            UserId = 1
                        },
                        new
                        {
                            Id = 43,
                            CategoryCostId = 5,
                            IsDeleted = false,
                            IsPublic = true,
                            Name = "کرایه اژانس",
                            UserId = 1
                        },
                        new
                        {
                            Id = 44,
                            CategoryCostId = 5,
                            IsDeleted = false,
                            IsPublic = true,
                            Name = "کرایه تاکسی",
                            UserId = 1
                        },
                        new
                        {
                            Id = 45,
                            CategoryCostId = 5,
                            IsDeleted = false,
                            IsPublic = true,
                            Name = "کرایه اتوبوس",
                            UserId = 1
                        },
                        new
                        {
                            Id = 46,
                            CategoryCostId = 5,
                            IsDeleted = false,
                            IsPublic = true,
                            Name = "کرایه مترو",
                            UserId = 1
                        },
                        new
                        {
                            Id = 47,
                            CategoryCostId = 5,
                            IsDeleted = false,
                            IsPublic = true,
                            Name = "سرویس",
                            UserId = 1
                        },
                        new
                        {
                            Id = 48,
                            CategoryCostId = 5,
                            IsDeleted = false,
                            IsPublic = true,
                            Name = "بلیط قطار",
                            UserId = 1
                        },
                        new
                        {
                            Id = 49,
                            CategoryCostId = 5,
                            IsDeleted = false,
                            IsPublic = true,
                            Name = "بلیط هواپیما",
                            UserId = 1
                        },
                        new
                        {
                            Id = 50,
                            CategoryCostId = 5,
                            IsDeleted = false,
                            IsPublic = true,
                            Name = "بلیط اتوبوس",
                            UserId = 1
                        },
                        new
                        {
                            Id = 51,
                            CategoryCostId = 5,
                            IsDeleted = false,
                            IsPublic = true,
                            Name = "کرایه هتل و محل اقامت",
                            UserId = 1
                        },
                        new
                        {
                            Id = 52,
                            CategoryCostId = 6,
                            IsDeleted = false,
                            IsPublic = true,
                            Name = "کلاس های ورزشی",
                            UserId = 1
                        },
                        new
                        {
                            Id = 53,
                            CategoryCostId = 6,
                            IsDeleted = false,
                            IsPublic = true,
                            Name = "شهریه مدرسه",
                            UserId = 1
                        },
                        new
                        {
                            Id = 54,
                            CategoryCostId = 6,
                            IsDeleted = false,
                            IsPublic = true,
                            Name = "شهریه دانشگاه",
                            UserId = 1
                        },
                        new
                        {
                            Id = 55,
                            CategoryCostId = 6,
                            IsDeleted = false,
                            IsPublic = true,
                            Name = "شهریه مهد کودک",
                            UserId = 1
                        },
                        new
                        {
                            Id = 56,
                            CategoryCostId = 6,
                            IsDeleted = false,
                            IsPublic = true,
                            Name = "لوازم التحریر",
                            UserId = 1
                        },
                        new
                        {
                            Id = 57,
                            CategoryCostId = 6,
                            IsDeleted = false,
                            IsPublic = true,
                            Name = "کلاس های آموزش",
                            UserId = 1
                        },
                        new
                        {
                            Id = 58,
                            CategoryCostId = 6,
                            IsDeleted = false,
                            IsPublic = true,
                            Name = "سایر",
                            UserId = 1
                        },
                        new
                        {
                            Id = 59,
                            CategoryCostId = 7,
                            IsDeleted = false,
                            IsPublic = true,
                            Name = "نرم افزار",
                            UserId = 1
                        },
                        new
                        {
                            Id = 60,
                            CategoryCostId = 7,
                            IsDeleted = false,
                            IsPublic = true,
                            Name = "کتاب",
                            UserId = 1
                        },
                        new
                        {
                            Id = 61,
                            CategoryCostId = 7,
                            IsDeleted = false,
                            IsPublic = true,
                            Name = "روزنامه و مجله",
                            UserId = 1
                        },
                        new
                        {
                            Id = 62,
                            CategoryCostId = 7,
                            IsDeleted = false,
                            IsPublic = true,
                            Name = "فیلم",
                            UserId = 1
                        },
                        new
                        {
                            Id = 63,
                            CategoryCostId = 7,
                            IsDeleted = false,
                            IsPublic = true,
                            Name = "سینما",
                            UserId = 1
                        },
                        new
                        {
                            Id = 64,
                            CategoryCostId = 7,
                            IsDeleted = false,
                            IsPublic = true,
                            Name = "موسیقی",
                            UserId = 1
                        },
                        new
                        {
                            Id = 65,
                            CategoryCostId = 7,
                            IsDeleted = false,
                            IsPublic = true,
                            Name = "تیاتر",
                            UserId = 1
                        },
                        new
                        {
                            Id = 66,
                            CategoryCostId = 7,
                            IsDeleted = false,
                            IsPublic = true,
                            Name = "کنسرت",
                            UserId = 1
                        },
                        new
                        {
                            Id = 67,
                            CategoryCostId = 7,
                            IsDeleted = false,
                            IsPublic = true,
                            Name = "اینترنت",
                            UserId = 1
                        },
                        new
                        {
                            Id = 68,
                            CategoryCostId = 7,
                            IsDeleted = false,
                            IsPublic = true,
                            Name = "بازی و سرگرمی",
                            UserId = 1
                        },
                        new
                        {
                            Id = 69,
                            CategoryCostId = 7,
                            IsDeleted = false,
                            IsPublic = true,
                            Name = "اماكن فرهنگی",
                            UserId = 1
                        },
                        new
                        {
                            Id = 70,
                            CategoryCostId = 7,
                            IsDeleted = false,
                            IsPublic = true,
                            Name = "سایر",
                            UserId = 1
                        },
                        new
                        {
                            Id = 71,
                            CategoryCostId = 8,
                            IsDeleted = false,
                            IsPublic = true,
                            Name = "سوغات",
                            UserId = 1
                        },
                        new
                        {
                            Id = 72,
                            CategoryCostId = 8,
                            IsDeleted = false,
                            IsPublic = true,
                            Name = "فرهنگی",
                            UserId = 1
                        },
                        new
                        {
                            Id = 73,
                            CategoryCostId = 8,
                            IsDeleted = false,
                            IsPublic = true,
                            Name = "لوازم",
                            UserId = 1
                        },
                        new
                        {
                            Id = 74,
                            CategoryCostId = 8,
                            IsDeleted = false,
                            IsPublic = true,
                            Name = "سایر",
                            UserId = 1
                        },
                        new
                        {
                            Id = 75,
                            CategoryCostId = 9,
                            IsDeleted = false,
                            IsPublic = true,
                            Name = "ویزیت پزشک",
                            UserId = 1
                        },
                        new
                        {
                            Id = 76,
                            CategoryCostId = 9,
                            IsDeleted = false,
                            IsPublic = true,
                            Name = "لوازم بهداشتی",
                            UserId = 1
                        },
                        new
                        {
                            Id = 77,
                            CategoryCostId = 9,
                            IsDeleted = false,
                            IsPublic = true,
                            Name = "لوازم ارایشی",
                            UserId = 1
                        },
                        new
                        {
                            Id = 78,
                            CategoryCostId = 9,
                            IsDeleted = false,
                            IsPublic = true,
                            Name = "لوازم پزشکی",
                            UserId = 1
                        },
                        new
                        {
                            Id = 79,
                            CategoryCostId = 9,
                            IsDeleted = false,
                            IsPublic = true,
                            Name = "دندان پزشکی",
                            UserId = 1
                        },
                        new
                        {
                            Id = 80,
                            CategoryCostId = 9,
                            IsDeleted = false,
                            IsPublic = true,
                            Name = "جراحی",
                            UserId = 1
                        },
                        new
                        {
                            Id = 81,
                            CategoryCostId = 9,
                            IsDeleted = false,
                            IsPublic = true,
                            Name = "بستری",
                            UserId = 1
                        },
                        new
                        {
                            Id = 82,
                            CategoryCostId = 9,
                            IsDeleted = false,
                            IsPublic = true,
                            Name = "آزمایشگاه",
                            UserId = 1
                        },
                        new
                        {
                            Id = 83,
                            CategoryCostId = 9,
                            IsDeleted = false,
                            IsPublic = true,
                            Name = "تصویر برداری",
                            UserId = 1
                        },
                        new
                        {
                            Id = 84,
                            CategoryCostId = 9,
                            IsDeleted = false,
                            IsPublic = true,
                            Name = "دارو",
                            UserId = 1
                        },
                        new
                        {
                            Id = 85,
                            CategoryCostId = 9,
                            IsDeleted = false,
                            IsPublic = true,
                            Name = "بیمه ها",
                            UserId = 1
                        },
                        new
                        {
                            Id = 86,
                            CategoryCostId = 9,
                            IsDeleted = false,
                            IsPublic = true,
                            Name = "سایر",
                            UserId = 1
                        },
                        new
                        {
                            Id = 87,
                            CategoryCostId = 10,
                            IsDeleted = false,
                            IsPublic = true,
                            Name = "هزینه های تشکیل پرونده",
                            UserId = 1
                        },
                        new
                        {
                            Id = 88,
                            CategoryCostId = 10,
                            IsDeleted = false,
                            IsPublic = true,
                            Name = "هزینه دادرسی",
                            UserId = 1
                        },
                        new
                        {
                            Id = 89,
                            CategoryCostId = 10,
                            IsDeleted = false,
                            IsPublic = true,
                            Name = "هزینه پست",
                            UserId = 1
                        },
                        new
                        {
                            Id = 90,
                            CategoryCostId = 10,
                            IsDeleted = false,
                            IsPublic = true,
                            Name = "هزینه مشاور",
                            UserId = 1
                        },
                        new
                        {
                            Id = 91,
                            CategoryCostId = 10,
                            IsDeleted = false,
                            IsPublic = true,
                            Name = "هزینه دعاوی",
                            UserId = 1
                        },
                        new
                        {
                            Id = 92,
                            CategoryCostId = 10,
                            IsDeleted = false,
                            IsPublic = true,
                            Name = "هزینه ثبت نام در کارگاه",
                            UserId = 1
                        },
                        new
                        {
                            Id = 93,
                            CategoryCostId = 10,
                            IsDeleted = false,
                            IsPublic = true,
                            Name = "سایر",
                            UserId = 1
                        },
                        new
                        {
                            Id = 94,
                            CategoryCostId = 11,
                            IsDeleted = false,
                            IsPublic = true,
                            Name = "زکات",
                            UserId = 1
                        },
                        new
                        {
                            Id = 95,
                            CategoryCostId = 11,
                            IsDeleted = false,
                            IsPublic = true,
                            Name = "خمس",
                            UserId = 1
                        },
                        new
                        {
                            Id = 96,
                            CategoryCostId = 11,
                            IsDeleted = false,
                            IsPublic = true,
                            Name = "صدقه",
                            UserId = 1
                        },
                        new
                        {
                            Id = 97,
                            CategoryCostId = 11,
                            IsDeleted = false,
                            IsPublic = true,
                            Name = "کفاره",
                            UserId = 1
                        },
                        new
                        {
                            Id = 98,
                            CategoryCostId = 11,
                            IsDeleted = false,
                            IsPublic = true,
                            Name = "نذری",
                            UserId = 1
                        },
                        new
                        {
                            Id = 99,
                            CategoryCostId = 11,
                            IsDeleted = false,
                            IsPublic = true,
                            Name = "وقف",
                            UserId = 1
                        },
                        new
                        {
                            Id = 100,
                            CategoryCostId = 11,
                            IsDeleted = false,
                            IsPublic = true,
                            Name = "سایر دیون اسلامی",
                            UserId = 1
                        },
                        new
                        {
                            Id = 101,
                            CategoryCostId = 12,
                            IsDeleted = false,
                            IsPublic = true,
                            Name = "سهام",
                            UserId = 1
                        },
                        new
                        {
                            Id = 102,
                            CategoryCostId = 12,
                            IsDeleted = false,
                            IsPublic = true,
                            Name = "اوراق قرضه",
                            UserId = 1
                        },
                        new
                        {
                            Id = 103,
                            CategoryCostId = 12,
                            IsDeleted = false,
                            IsPublic = true,
                            Name = "سرمایه گذاری در املاک",
                            UserId = 1
                        },
                        new
                        {
                            Id = 104,
                            CategoryCostId = 12,
                            IsDeleted = false,
                            IsPublic = true,
                            Name = "سرمایه گذاری در ارز",
                            UserId = 1
                        },
                        new
                        {
                            Id = 105,
                            CategoryCostId = 12,
                            IsDeleted = false,
                            IsPublic = true,
                            Name = "سرمایه گذاری در طلا",
                            UserId = 1
                        },
                        new
                        {
                            Id = 106,
                            CategoryCostId = 12,
                            IsDeleted = false,
                            IsPublic = true,
                            Name = "سرمایه گذاری در کریپتوکارنسی",
                            UserId = 1
                        },
                        new
                        {
                            Id = 107,
                            CategoryCostId = 12,
                            IsDeleted = false,
                            IsPublic = true,
                            Name = "سرمایه گذاری در صندوق های سرمایه گذاری",
                            UserId = 1
                        },
                        new
                        {
                            Id = 108,
                            CategoryCostId = 12,
                            IsDeleted = false,
                            IsPublic = true,
                            Name = "سایر سرمایه گذاری ها",
                            UserId = 1
                        });
                });

            modelBuilder.Entity("App.Domain.Core.Accounting.Entities.Accounts.Sub.SubcategoryIncome", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryIncomeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsPublic")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryIncomeId");

                    b.HasIndex("UserId");

                    b.ToTable("SubcategoryIncomes", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryIncomeId = 1,
                            IsDeleted = false,
                            IsPublic = true,
                            Name = "حقوق ماهیانه",
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            CategoryIncomeId = 1,
                            IsDeleted = false,
                            IsPublic = true,
                            Name = "عیدی",
                            UserId = 1
                        },
                        new
                        {
                            Id = 3,
                            CategoryIncomeId = 1,
                            IsDeleted = false,
                            IsPublic = true,
                            Name = "پاداش",
                            UserId = 1
                        },
                        new
                        {
                            Id = 4,
                            CategoryIncomeId = 1,
                            IsDeleted = false,
                            IsPublic = true,
                            Name = "مزایا",
                            UserId = 1
                        },
                        new
                        {
                            Id = 5,
                            CategoryIncomeId = 1,
                            IsDeleted = false,
                            IsPublic = true,
                            Name = "سایر حقوق",
                            UserId = 1
                        },
                        new
                        {
                            Id = 6,
                            CategoryIncomeId = 2,
                            IsDeleted = false,
                            IsPublic = true,
                            Name = "لوازم",
                            UserId = 1
                        },
                        new
                        {
                            Id = 7,
                            CategoryIncomeId = 2,
                            IsDeleted = false,
                            IsPublic = true,
                            Name = "مسکن",
                            UserId = 1
                        },
                        new
                        {
                            Id = 8,
                            CategoryIncomeId = 2,
                            IsDeleted = false,
                            IsPublic = true,
                            Name = "خودرو",
                            UserId = 1
                        },
                        new
                        {
                            Id = 9,
                            CategoryIncomeId = 2,
                            IsDeleted = false,
                            IsPublic = true,
                            Name = "سایر فروش",
                            UserId = 1
                        },
                        new
                        {
                            Id = 10,
                            CategoryIncomeId = 3,
                            IsDeleted = false,
                            IsPublic = true,
                            Name = "سود سپرده بانکی",
                            UserId = 1
                        },
                        new
                        {
                            Id = 11,
                            CategoryIncomeId = 3,
                            IsDeleted = false,
                            IsPublic = true,
                            Name = "سود اوراق مشارکت",
                            UserId = 1
                        },
                        new
                        {
                            Id = 12,
                            CategoryIncomeId = 3,
                            IsDeleted = false,
                            IsPublic = true,
                            Name = "سود سهام",
                            UserId = 1
                        },
                        new
                        {
                            Id = 13,
                            CategoryIncomeId = 3,
                            IsDeleted = false,
                            IsPublic = true,
                            Name = "سایر سود سرمایه",
                            UserId = 1
                        },
                        new
                        {
                            Id = 14,
                            CategoryIncomeId = 4,
                            IsDeleted = false,
                            IsPublic = true,
                            Name = "یارانه نقدی",
                            UserId = 1
                        },
                        new
                        {
                            Id = 15,
                            CategoryIncomeId = 4,
                            IsDeleted = false,
                            IsPublic = true,
                            Name = "هدیه",
                            UserId = 1
                        },
                        new
                        {
                            Id = 16,
                            CategoryIncomeId = 4,
                            IsDeleted = false,
                            IsPublic = true,
                            Name = "سایر یارانه و هدایا",
                            UserId = 1
                        },
                        new
                        {
                            Id = 17,
                            CategoryIncomeId = 5,
                            IsDeleted = false,
                            IsPublic = true,
                            Name = "اجاره آپارتمان",
                            UserId = 1
                        },
                        new
                        {
                            Id = 18,
                            CategoryIncomeId = 5,
                            IsDeleted = false,
                            IsPublic = true,
                            Name = "اجاره مغازه",
                            UserId = 1
                        },
                        new
                        {
                            Id = 19,
                            CategoryIncomeId = 5,
                            IsDeleted = false,
                            IsPublic = true,
                            Name = "اجاره شرکت",
                            UserId = 1
                        },
                        new
                        {
                            Id = 20,
                            CategoryIncomeId = 5,
                            IsDeleted = false,
                            IsPublic = true,
                            Name = "سایر درآمد اجاره",
                            UserId = 1
                        });
                });

            modelBuilder.Entity("App.Domain.Core.Accounting.Entities.Budgetings.Budgeting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("FDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<decimal>("MaxAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("MinAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime>("TDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("Xxpenses")
                        .HasColumnType("int");

                    b.Property<int>("timings")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Budgetings", (string)null);
                });

            modelBuilder.Entity("App.Domain.Core.Accounting.Entities.Loans.SettledLoans", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("FirstInstallmentTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsSpent")
                        .HasColumnType("bit");

                    b.Property<int>("MyProperty")
                        .HasColumnType("int");

                    b.Property<int>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("int");

                    b.Property<DateTime>("ReceiveTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("TimeFrame")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("SettledLoans");
                });

            modelBuilder.Entity("App.Domain.Core.Accounting.Entities.PMEList.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("App.Domain.Core.Accounting.Entities.PMEList.Member", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Members");
                });

            modelBuilder.Entity("App.Domain.Core.Accounting.Entities.PMEList.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("App.Domain.Core.Accounting.Entities.Reports.IncomeList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("BankId")
                        .HasColumnType("int");

                    b.Property<string>("CheckNumber")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int>("PaymentType")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BankId");

                    b.HasIndex("UserId");

                    b.ToTable("IncomeLists");
                });

            modelBuilder.Entity("App.Domain.Core.Accounting.Entities.Reports.ListExpenses", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("BankId")
                        .HasColumnType("int");

                    b.Property<string>("CheckNumber")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int>("PaymentType")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BankId");

                    b.HasIndex("UserId");

                    b.ToTable("ListExpenses");
                });

            modelBuilder.Entity("App.Domain.Core.Accounting.Entities.Users.Contacts", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("App.Domain.Core.Accounting.Entities.Users.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsBloked")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d42888d1-a2d9-4a9b-b956-ee4e8492037a",
                            Email = "admin@example.com",
                            EmailConfirmed = true,
                            FirstName = "Admin",
                            IsActive = true,
                            IsBloked = false,
                            IsDeleted = false,
                            LastName = "User",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@EXAMPLE.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEL6YCg2ViT1zB2+ZJ0nqjpUFIVTu/zLWGFKVWAvnItfB+glux646zykmGhMWjw1i7A==",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = false,
                            RoleId = 1,
                            SecurityStamp = "36579e6e-acf1-40b9-842e-df3c8f4d5384",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8dffe5a7-00d2-4dbf-9ea5-2470ba9741ef",
                            Email = "employee@example.com",
                            EmailConfirmed = true,
                            FirstName = "Employee",
                            IsActive = true,
                            IsBloked = false,
                            IsDeleted = false,
                            LastName = "User",
                            LockoutEnabled = false,
                            NormalizedEmail = "EMPLOYEE@EXAMPLE.COM",
                            NormalizedUserName = "EMPLOYEE",
                            PasswordHash = "AQAAAAIAAYagAAAAEORaINCmT4wyAAcJorYjwxv2RliWSXFg4JwtLV90JuMFHhkuYHWrg+0n8RHzv7GAyw==",
                            PhoneNumber = "0987654321",
                            PhoneNumberConfirmed = false,
                            RoleId = 2,
                            SecurityStamp = "bb46e04d-8809-47c3-a70b-b47f446e5603",
                            TwoFactorEnabled = false,
                            UserName = "employee"
                        });
                });

            modelBuilder.Entity("App.Domain.Core.Accounting.Entities.payment.Check", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("BankId")
                        .HasColumnType("int");

                    b.Property<string>("ChecNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("DuDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("EventId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int?>("MemderId")
                        .HasColumnType("int");

                    b.Property<int?>("ProjectId")
                        .HasColumnType("int");

                    b.Property<int?>("SubcategoryCostId")
                        .HasColumnType("int");

                    b.Property<int?>("SubcategoryIncomeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("Xxpenses")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BankId");

                    b.HasIndex("EventId");

                    b.HasIndex("MemderId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("SubcategoryCostId");

                    b.HasIndex("SubcategoryIncomeId");

                    b.HasIndex("UserId");

                    b.ToTable("Checks");
                });

            modelBuilder.Entity("App.Domain.Core.Accounting.Entities.payment.Criticism", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("EventId")
                        .HasColumnType("int");

                    b.Property<int>("FromAccountId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int?>("MemderId")
                        .HasColumnType("int");

                    b.Property<int?>("ProjectId")
                        .HasColumnType("int");

                    b.Property<int?>("SubcategoryCostId")
                        .HasColumnType("int");

                    b.Property<int?>("SubcategoryIncomeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("Xxpenses")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("FromAccountId");

                    b.HasIndex("MemderId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("SubcategoryCostId");

                    b.HasIndex("SubcategoryIncomeId");

                    b.HasIndex("UserId");

                    b.ToTable("Criticisms");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Employee",
                            NormalizedName = "EMPLOYEE"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 2,
                            RoleId = 2
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("App.Domain.Core.Accounting.Entities.AccountIn.FromAccount", b =>
                {
                    b.HasOne("App.Domain.Core.Accounting.Entities.Accounts.Assets", "Asset")
                        .WithMany()
                        .HasForeignKey("AssetsId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("App.Domain.Core.Accounting.Entities.Accounts.Bank", "Banks")
                        .WithMany()
                        .HasForeignKey("BankId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("App.Domain.Core.Accounting.Entities.Accounts.Capital", "Capitals")
                        .WithMany()
                        .HasForeignKey("CapitalId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("App.Domain.Core.Accounting.Entities.Accounts.CategoryCost", "CategoryCosts")
                        .WithMany()
                        .HasForeignKey("CategoryCostId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("App.Domain.Core.Accounting.Entities.Accounts.CategoryIncome", "CategoryIncomes")
                        .WithMany()
                        .HasForeignKey("CategoryIncomeId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("App.Domain.Core.Accounting.Entities.payment.Criticism", "Criticisms")
                        .WithMany()
                        .HasForeignKey("CriticismsId");

                    b.HasOne("App.Domain.Core.Accounting.Entities.Accounts.Debts", "Debt")
                        .WithMany()
                        .HasForeignKey("DebtsId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("App.Domain.Core.Accounting.Entities.Accounts.Funds", "Fund")
                        .WithMany()
                        .HasForeignKey("FundsId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("App.Domain.Core.Accounting.Entities.Accounts.Persons", "Person")
                        .WithMany()
                        .HasForeignKey("PersonsId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Asset");

                    b.Navigation("Banks");

                    b.Navigation("Capitals");

                    b.Navigation("CategoryCosts");

                    b.Navigation("CategoryIncomes");

                    b.Navigation("Criticisms");

                    b.Navigation("Debt");

                    b.Navigation("Fund");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("App.Domain.Core.Accounting.Entities.Accounts.Assets", b =>
                {
                    b.HasOne("App.Domain.Core.Accounting.Entities.Users.User", "Users")
                        .WithMany("Assetses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Users");
                });

            modelBuilder.Entity("App.Domain.Core.Accounting.Entities.Accounts.Bank", b =>
                {
                    b.HasOne("App.Domain.Core.Accounting.Entities.Users.User", "Users")
                        .WithMany("Banks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Users");
                });

            modelBuilder.Entity("App.Domain.Core.Accounting.Entities.Accounts.Capital", b =>
                {
                    b.HasOne("App.Domain.Core.Accounting.Entities.Users.User", "Users")
                        .WithMany("Capitals")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Users");
                });

            modelBuilder.Entity("App.Domain.Core.Accounting.Entities.Accounts.CategoryCost", b =>
                {
                    b.HasOne("App.Domain.Core.Accounting.Entities.Users.User", "Users")
                        .WithMany("CategoryCosts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Users");
                });

            modelBuilder.Entity("App.Domain.Core.Accounting.Entities.Accounts.CategoryIncome", b =>
                {
                    b.HasOne("App.Domain.Core.Accounting.Entities.Users.User", "Users")
                        .WithMany("CategoryIncomes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Users");
                });

            modelBuilder.Entity("App.Domain.Core.Accounting.Entities.Accounts.Debts", b =>
                {
                    b.HasOne("App.Domain.Core.Accounting.Entities.Users.User", "Users")
                        .WithMany("Debtses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Users");
                });

            modelBuilder.Entity("App.Domain.Core.Accounting.Entities.Accounts.Funds", b =>
                {
                    b.HasOne("App.Domain.Core.Accounting.Entities.Users.User", "Users")
                        .WithMany("Fundses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Users");
                });

            modelBuilder.Entity("App.Domain.Core.Accounting.Entities.Accounts.Persons", b =>
                {
                    b.HasOne("App.Domain.Core.Accounting.Entities.Users.Contacts", "Contacts")
                        .WithMany()
                        .HasForeignKey("ContactsId");

                    b.HasOne("App.Domain.Core.Accounting.Entities.Users.User", "Users")
                        .WithMany("Persons")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contacts");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("App.Domain.Core.Accounting.Entities.Accounts.Sub.AddAssets", b =>
                {
                    b.HasOne("App.Domain.Core.Accounting.Entities.Accounts.Assets", "Assets")
                        .WithMany("AddAsset")
                        .HasForeignKey("AssetsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("App.Domain.Core.Accounting.Entities.Users.User", "Users")
                        .WithMany("AddAssets")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Assets");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("App.Domain.Core.Accounting.Entities.Accounts.Sub.AddCapital", b =>
                {
                    b.HasOne("App.Domain.Core.Accounting.Entities.Accounts.Capital", "Capitals")
                        .WithMany("AddCapital")
                        .HasForeignKey("CapitalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("App.Domain.Core.Accounting.Entities.Users.User", "Users")
                        .WithMany("AddCapitals")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Capitals");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("App.Domain.Core.Accounting.Entities.Accounts.Sub.AddDbts", b =>
                {
                    b.HasOne("App.Domain.Core.Accounting.Entities.Accounts.Debts", "Debt")
                        .WithMany("AddDbts")
                        .HasForeignKey("DebtsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("App.Domain.Core.Accounting.Entities.Users.User", "Users")
                        .WithMany("AddDbts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Debt");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("App.Domain.Core.Accounting.Entities.Accounts.Sub.Creditors", b =>
                {
                    b.HasOne("App.Domain.Core.Accounting.Entities.Users.User", "Users")
                        .WithMany("Creditorses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Users");
                });

            modelBuilder.Entity("App.Domain.Core.Accounting.Entities.Accounts.Sub.Debtors", b =>
                {
                    b.HasOne("App.Domain.Core.Accounting.Entities.Users.User", "Users")
                        .WithMany("Debtors")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Users");
                });

            modelBuilder.Entity("App.Domain.Core.Accounting.Entities.Accounts.Sub.SubcategoryCost", b =>
                {
                    b.HasOne("App.Domain.Core.Accounting.Entities.Accounts.CategoryCost", "CategoryCostes")
                        .WithMany("SubcategoryCosts")
                        .HasForeignKey("CategoryCostId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("App.Domain.Core.Accounting.Entities.Users.User", "Users")
                        .WithMany("SubcategoryCosts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CategoryCostes");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("App.Domain.Core.Accounting.Entities.Accounts.Sub.SubcategoryIncome", b =>
                {
                    b.HasOne("App.Domain.Core.Accounting.Entities.Accounts.CategoryIncome", "CategoryIncome")
                        .WithMany("SubcategoryIncomes")
                        .HasForeignKey("CategoryIncomeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("App.Domain.Core.Accounting.Entities.Users.User", "Users")
                        .WithMany("SubcategoryIncomes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CategoryIncome");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("App.Domain.Core.Accounting.Entities.Budgetings.Budgeting", b =>
                {
                    b.HasOne("App.Domain.Core.Accounting.Entities.Users.User", "Users")
                        .WithMany("Budgetings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Users");
                });

            modelBuilder.Entity("App.Domain.Core.Accounting.Entities.Loans.SettledLoans", b =>
                {
                    b.HasOne("App.Domain.Core.Accounting.Entities.Users.User", "Users")
                        .WithMany("SettledLoans")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Users");
                });

            modelBuilder.Entity("App.Domain.Core.Accounting.Entities.PMEList.Event", b =>
                {
                    b.HasOne("App.Domain.Core.Accounting.Entities.Users.User", "Users")
                        .WithMany("Events")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Users");
                });

            modelBuilder.Entity("App.Domain.Core.Accounting.Entities.PMEList.Member", b =>
                {
                    b.HasOne("App.Domain.Core.Accounting.Entities.Users.User", "Users")
                        .WithMany("Members")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Users");
                });

            modelBuilder.Entity("App.Domain.Core.Accounting.Entities.PMEList.Project", b =>
                {
                    b.HasOne("App.Domain.Core.Accounting.Entities.Users.User", "User")
                        .WithMany("Projects")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("App.Domain.Core.Accounting.Entities.Reports.IncomeList", b =>
                {
                    b.HasOne("App.Domain.Core.Accounting.Entities.Accounts.Bank", "Banks")
                        .WithMany()
                        .HasForeignKey("BankId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("App.Domain.Core.Accounting.Entities.Users.User", "Users")
                        .WithMany("IncomeLists")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Banks");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("App.Domain.Core.Accounting.Entities.Reports.ListExpenses", b =>
                {
                    b.HasOne("App.Domain.Core.Accounting.Entities.Accounts.Bank", "Banks")
                        .WithMany()
                        .HasForeignKey("BankId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("App.Domain.Core.Accounting.Entities.Users.User", "Users")
                        .WithMany("ListExpenses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Banks");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("App.Domain.Core.Accounting.Entities.Users.Contacts", b =>
                {
                    b.HasOne("App.Domain.Core.Accounting.Entities.Users.User", "Users")
                        .WithMany("Contacts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Users");
                });

            modelBuilder.Entity("App.Domain.Core.Accounting.Entities.payment.Check", b =>
                {
                    b.HasOne("App.Domain.Core.Accounting.Entities.Accounts.Bank", "Banks")
                        .WithMany()
                        .HasForeignKey("BankId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("App.Domain.Core.Accounting.Entities.PMEList.Event", "Events")
                        .WithMany()
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("App.Domain.Core.Accounting.Entities.PMEList.Member", "Members")
                        .WithMany()
                        .HasForeignKey("MemderId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("App.Domain.Core.Accounting.Entities.PMEList.Project", "Projects")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("App.Domain.Core.Accounting.Entities.Accounts.Sub.SubcategoryCost", "SubCategorise")
                        .WithMany()
                        .HasForeignKey("SubcategoryCostId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("App.Domain.Core.Accounting.Entities.Accounts.Sub.SubcategoryIncome", "SubCategoryIncomes")
                        .WithMany()
                        .HasForeignKey("SubcategoryIncomeId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("App.Domain.Core.Accounting.Entities.Users.User", "Users")
                        .WithMany("Checks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Banks");

                    b.Navigation("Events");

                    b.Navigation("Members");

                    b.Navigation("Projects");

                    b.Navigation("SubCategorise");

                    b.Navigation("SubCategoryIncomes");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("App.Domain.Core.Accounting.Entities.payment.Criticism", b =>
                {
                    b.HasOne("App.Domain.Core.Accounting.Entities.PMEList.Event", "Events")
                        .WithMany()
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("App.Domain.Core.Accounting.Entities.AccountIn.FromAccount", "FromAccounts")
                        .WithMany()
                        .HasForeignKey("FromAccountId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("App.Domain.Core.Accounting.Entities.PMEList.Member", "Members")
                        .WithMany()
                        .HasForeignKey("MemderId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("App.Domain.Core.Accounting.Entities.PMEList.Project", "Projects")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("App.Domain.Core.Accounting.Entities.Accounts.Sub.SubcategoryCost", "SubCategorise")
                        .WithMany()
                        .HasForeignKey("SubcategoryCostId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("App.Domain.Core.Accounting.Entities.Accounts.Sub.SubcategoryIncome", "SubCategoryIncomes")
                        .WithMany()
                        .HasForeignKey("SubcategoryIncomeId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("App.Domain.Core.Accounting.Entities.Users.User", "Users")
                        .WithMany("Criticisms")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Events");

                    b.Navigation("FromAccounts");

                    b.Navigation("Members");

                    b.Navigation("Projects");

                    b.Navigation("SubCategorise");

                    b.Navigation("SubCategoryIncomes");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("App.Domain.Core.Accounting.Entities.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("App.Domain.Core.Accounting.Entities.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("App.Domain.Core.Accounting.Entities.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("App.Domain.Core.Accounting.Entities.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("App.Domain.Core.Accounting.Entities.Accounts.Assets", b =>
                {
                    b.Navigation("AddAsset");
                });

            modelBuilder.Entity("App.Domain.Core.Accounting.Entities.Accounts.Capital", b =>
                {
                    b.Navigation("AddCapital");
                });

            modelBuilder.Entity("App.Domain.Core.Accounting.Entities.Accounts.CategoryCost", b =>
                {
                    b.Navigation("SubcategoryCosts");
                });

            modelBuilder.Entity("App.Domain.Core.Accounting.Entities.Accounts.CategoryIncome", b =>
                {
                    b.Navigation("SubcategoryIncomes");
                });

            modelBuilder.Entity("App.Domain.Core.Accounting.Entities.Accounts.Debts", b =>
                {
                    b.Navigation("AddDbts");
                });

            modelBuilder.Entity("App.Domain.Core.Accounting.Entities.Users.User", b =>
                {
                    b.Navigation("AddAssets");

                    b.Navigation("AddCapitals");

                    b.Navigation("AddDbts");

                    b.Navigation("Assetses");

                    b.Navigation("Banks");

                    b.Navigation("Budgetings");

                    b.Navigation("Capitals");

                    b.Navigation("CategoryCosts");

                    b.Navigation("CategoryIncomes");

                    b.Navigation("Checks");

                    b.Navigation("Contacts");

                    b.Navigation("Creditorses");

                    b.Navigation("Criticisms");

                    b.Navigation("Debtors");

                    b.Navigation("Debtses");

                    b.Navigation("Events");

                    b.Navigation("Fundses");

                    b.Navigation("IncomeLists");

                    b.Navigation("ListExpenses");

                    b.Navigation("Members");

                    b.Navigation("Persons");

                    b.Navigation("Projects");

                    b.Navigation("SettledLoans");

                    b.Navigation("SubcategoryCosts");

                    b.Navigation("SubcategoryIncomes");
                });
#pragma warning restore 612, 618
        }
    }
}
